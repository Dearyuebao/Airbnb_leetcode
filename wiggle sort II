class Solution {
    public void wiggleSort(int[] nums) {
        int n = nums.length;
        int[] tem = new int[n];
        for(int i = 0; i < n; i++) {
            tem[i] = nums[i];
        }
        int[] res = new int[n];
        int mid = partition(tem, 0, n - 1);
        for(int i = 0; i < n; i++) {
            res[i] = mid;
        }
        int l = 1, r = (n % 2 == 0) ? n - 2: n - 1;
        for(int i = 0; i < n; i++) {
            if(nums[i] > mid) {
                res[l] = nums[i];
                l+=2;
            } else if(nums[i] < mid) {
                res[r] = nums[i];
                r-=2;
            }
        }
        
        for(int i = 0; i < n; i++) {
            nums[i] = res[i];
        }
    }
    
    public int partition(int[] nums, int l, int r) {
        int left = l, right = r;
        int now = nums[l];
        while(left < right) {
            while(left < right && nums[right] >= now) {
                right--;
            }
            nums[left] = nums[right];
            while(left < right && nums[left] <= now) {
                left++;
            } 
            nums[right] = nums[left];
        }
        nums[left] = now;
        if(left == nums.length / 2) {
            return now;
        } else if(left > nums.length / 2) {
            return partition(nums, l, r - 1);
        } else {
            return partition(nums, l + 1, r);
        }
    }
}
